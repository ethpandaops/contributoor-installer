// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ethpandaops/contributoor-installer/internal/sidecar (interfaces: BinarySidecar)
//
// Generated by this command:
//
//	mockgen -package mock -destination mock/binary.mock.go github.com/ethpandaops/contributoor-installer/internal/sidecar BinarySidecar
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockBinarySidecar is a mock of BinarySidecar interface.
type MockBinarySidecar struct {
	ctrl     *gomock.Controller
	recorder *MockBinarySidecarMockRecorder
}

// MockBinarySidecarMockRecorder is the mock recorder for MockBinarySidecar.
type MockBinarySidecarMockRecorder struct {
	mock *MockBinarySidecar
}

// NewMockBinarySidecar creates a new mock instance.
func NewMockBinarySidecar(ctrl *gomock.Controller) *MockBinarySidecar {
	mock := &MockBinarySidecar{ctrl: ctrl}
	mock.recorder = &MockBinarySidecarMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBinarySidecar) EXPECT() *MockBinarySidecarMockRecorder {
	return m.recorder
}

// IsRunning mocks base method.
func (m *MockBinarySidecar) IsRunning() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRunning")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsRunning indicates an expected call of IsRunning.
func (mr *MockBinarySidecarMockRecorder) IsRunning() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRunning", reflect.TypeOf((*MockBinarySidecar)(nil).IsRunning))
}

// Start mocks base method.
func (m *MockBinarySidecar) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockBinarySidecarMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockBinarySidecar)(nil).Start))
}

// Stop mocks base method.
func (m *MockBinarySidecar) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockBinarySidecarMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockBinarySidecar)(nil).Stop))
}

// Update mocks base method.
func (m *MockBinarySidecar) Update() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update")
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockBinarySidecarMockRecorder) Update() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBinarySidecar)(nil).Update))
}
