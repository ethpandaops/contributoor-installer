// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ethpandaops/contributoor-installer/internal/sidecar (interfaces: SystemdSidecar)
//
// Generated by this command:
//
//	mockgen -package mock -destination mock/systemd.mock.go github.com/ethpandaops/contributoor-installer/internal/sidecar SystemdSidecar
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSystemdSidecar is a mock of SystemdSidecar interface.
type MockSystemdSidecar struct {
	ctrl     *gomock.Controller
	recorder *MockSystemdSidecarMockRecorder
}

// MockSystemdSidecarMockRecorder is the mock recorder for MockSystemdSidecar.
type MockSystemdSidecarMockRecorder struct {
	mock *MockSystemdSidecar
}

// NewMockSystemdSidecar creates a new mock instance.
func NewMockSystemdSidecar(ctrl *gomock.Controller) *MockSystemdSidecar {
	mock := &MockSystemdSidecar{ctrl: ctrl}
	mock.recorder = &MockSystemdSidecarMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSystemdSidecar) EXPECT() *MockSystemdSidecarMockRecorder {
	return m.recorder
}

// IsRunning mocks base method.
func (m *MockSystemdSidecar) IsRunning() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRunning")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsRunning indicates an expected call of IsRunning.
func (mr *MockSystemdSidecarMockRecorder) IsRunning() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRunning", reflect.TypeOf((*MockSystemdSidecar)(nil).IsRunning))
}

// Start mocks base method.
func (m *MockSystemdSidecar) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockSystemdSidecarMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockSystemdSidecar)(nil).Start))
}

// Stop mocks base method.
func (m *MockSystemdSidecar) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockSystemdSidecarMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockSystemdSidecar)(nil).Stop))
}

// Update mocks base method.
func (m *MockSystemdSidecar) Update() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update")
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockSystemdSidecarMockRecorder) Update() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockSystemdSidecar)(nil).Update))
}
