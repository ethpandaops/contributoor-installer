// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ethpandaops/contributoor-installer/internal/service (interfaces: BinaryService)
//
// Generated by this command:
//
//	mockgen -package mock -destination mock/binary.mock.go github.com/ethpandaops/contributoor-installer/internal/service BinaryService
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockBinaryService is a mock of BinaryService interface.
type MockBinaryService struct {
	ctrl     *gomock.Controller
	recorder *MockBinaryServiceMockRecorder
}

// MockBinaryServiceMockRecorder is the mock recorder for MockBinaryService.
type MockBinaryServiceMockRecorder struct {
	mock *MockBinaryService
}

// NewMockBinaryService creates a new mock instance.
func NewMockBinaryService(ctrl *gomock.Controller) *MockBinaryService {
	mock := &MockBinaryService{ctrl: ctrl}
	mock.recorder = &MockBinaryServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBinaryService) EXPECT() *MockBinaryServiceMockRecorder {
	return m.recorder
}

// IsRunning mocks base method.
func (m *MockBinaryService) IsRunning() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsRunning")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsRunning indicates an expected call of IsRunning.
func (mr *MockBinaryServiceMockRecorder) IsRunning() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsRunning", reflect.TypeOf((*MockBinaryService)(nil).IsRunning))
}

// Start mocks base method.
func (m *MockBinaryService) Start() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start")
	ret0, _ := ret[0].(error)
	return ret0
}

// Start indicates an expected call of Start.
func (mr *MockBinaryServiceMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockBinaryService)(nil).Start))
}

// Stop mocks base method.
func (m *MockBinaryService) Stop() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stop")
	ret0, _ := ret[0].(error)
	return ret0
}

// Stop indicates an expected call of Stop.
func (mr *MockBinaryServiceMockRecorder) Stop() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockBinaryService)(nil).Stop))
}

// Update mocks base method.
func (m *MockBinaryService) Update() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update")
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockBinaryServiceMockRecorder) Update() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockBinaryService)(nil).Update))
}
