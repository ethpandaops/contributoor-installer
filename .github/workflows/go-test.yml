name: go-test

on:
  push:
    branches:
      - '**'
  pull_request:

permissions:
  contents: read
  checks: write

jobs:
  test:
    name: test-${{ matrix.os }}-${{ matrix.test-group }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        test-group: [1, 2, 3, 4]
    steps:
      - uses: actions/checkout@v4

      - name: Set up Go
        uses: ./.github/workflows/go-setup

      - name: Run Tests
        run: |
          # List all packages
          PKGS=$(go list ./...)
          
          # Get total package count and calculate split
          COUNT=$(echo "$PKGS" | wc -l)
          SPLIT=$((COUNT / 4))
          GROUP=${{ matrix.test-group }}
          START=$(((GROUP - 1) * SPLIT))
          
          # Select packages for this group
          if [ "$GROUP" == "4" ]; then
            TEST_PKGS=$(echo "$PKGS" | tail -n +$START)
          else
            TEST_PKGS=$(echo "$PKGS" | tail -n +$START | head -n $SPLIT)
          fi
          
          # Run tests for this group with JSON output
          go test -v -race -json $TEST_PKGS > test.$GROUP.json

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-group }}
          path: test.${{ matrix.test-group }}.json

  annotate:
    needs: test
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Download test results
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          merge-multiple: true

      - name: Merge test results
        run: |
          # Start with an empty array
          echo "[" > test.json
          
          # Merge all test result files, adding commas between them
          first=true
          for f in test.*.json; do
            if [ -f "$f" ]; then
              if [ "$first" = true ]; then
                first=false
              else
                echo "," >> test.json
              fi
              # Remove the last newline if it exists and append to test.json
              sed -e ':a' -e 'N' -e '$!ba' -e 's/\n/,/g' "$f" >> test.json
            fi
          done
          
          # Close the array
          echo "]" >> test.json

      - name: Annotate tests
        uses: guyarb/golang-test-annotations@v0.6.0
        with:
          test-results: test.json